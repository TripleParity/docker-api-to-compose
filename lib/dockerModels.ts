 /* tslint:disable */
 
/**
 * This file was generated by downloading the docker Swagger spec
 * (https://docs.docker.com/engine/api/v1.37/swagger.yaml)
 * and then using sw2dts (https://github.com/mstssk/sw2dts)
 */

/**
 * Address represents an IPv4 or IPv6 IP address.
 */
export interface Address {
    /**
     * IP address.
     */
    Addr?: string;
    /**
     * Mask length of the IP address.
     */
    PrefixLen?: number;
}
/**
 * example:
 * [object Object]
 */
export interface AuthConfig {
    username?: string;
    password?: string;
    email?: string;
    serveraddress?: string;
}
export interface BuildInfo {
    id?: string;
    stream?: string;
    error?: string;
    errorDetail?: ErrorDetail;
    status?: string;
    progress?: string;
    progressDetail?: ProgressDetail;
    aux?: ImageID;
}
/**
 * ClusterInfo represents information about the swarm as is returned by the
 * "/info" endpoint. Join-tokens are not included.
 * 
 */
export interface ClusterInfo {
    /**
     * The ID of the swarm.
     * example:
     * abajmipo7b4xz5ip2nrla6b11
     */
    ID?: string;
    Version?: ObjectVersion;
    /**
     * Date and time at which the swarm was initialised in
     * [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
     * 
     * example:
     * 2016-08-18T10:44:24.496525531Z
     */
    CreatedAt?: string; // dateTime
    /**
     * Date and time at which the swarm was last updated in
     * [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
     * 
     * example:
     * 2017-08-09T07:09:37.632105588Z
     */
    UpdatedAt?: string; // dateTime
    Spec?: SwarmSpec;
    TLSInfo?: TLSInfo;
    /**
     * Whether there is currently a root CA rotation in progress for the swarm
     * example:
     * false
     */
    RootRotationInProgress?: boolean;
}
/**
 * Commit holds the Git-commit (SHA1) that a binary was built from, as
 * reported in the version-string of external tools, such as `containerd`,
 * or `runC`.
 * 
 */
export interface Commit {
    /**
     * Actual commit ID of external tool.
     * example:
     * cfb82a876ecc11b5ca0977d1733adbe58599088a
     */
    ID?: string;
    /**
     * Commit ID of external tool expected by dockerd as set at build time.
     * 
     * example:
     * 2d41c047c83e09a6d61d464906feb2a2f3c52aa4
     */
    Expected?: string;
}
export interface Config {
    ID?: string;
    Version?: ObjectVersion;
    CreatedAt?: string; // dateTime
    UpdatedAt?: string; // dateTime
    Spec?: ConfigSpec;
}
export interface ConfigSpec {
    /**
     * User-defined name of the config.
     */
    Name?: string;
    /**
     * User-defined key/value metadata.
     */
    Labels?: {
        [name: string]: string;
    };
    /**
     * Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-3.2))
     * config data.
     * 
     */
    Data?: string;
    /**
     * Templating driver, if applicable
     * 
     * Templating controls whether and how to evaluate the config payload as
     * a template. If no driver is set, no templating is used.
     * 
     */
    Templating?: Driver;
}
/**
 * Configuration for a container that is portable between hosts
 */
export interface ContainerConfig {
    /**
     * The hostname to use for the container, as a valid RFC 1123 hostname.
     */
    Hostname?: string;
    /**
     * The domain name to use for the container.
     */
    Domainname?: string;
    /**
     * The user that commands are run as inside the container.
     */
    User?: string;
    /**
     * Whether to attach to `stdin`.
     */
    AttachStdin?: boolean;
    /**
     * Whether to attach to `stdout`.
     */
    AttachStdout?: boolean;
    /**
     * Whether to attach to `stderr`.
     */
    AttachStderr?: boolean;
    /**
     * An object mapping ports to an empty object in the form:
     * 
     * `{"<port>/<tcp|udp|sctp>": {}}`
     * 
     */
    ExposedPorts?: {
        [name: string]: "[object Object]";
    };
    /**
     * Attach standard streams to a TTY, including `stdin` if it is not closed.
     */
    Tty?: boolean;
    /**
     * Open `stdin`
     */
    OpenStdin?: boolean;
    /**
     * Close `stdin` after one attached client disconnects
     */
    StdinOnce?: boolean;
    /**
     * A list of environment variables to set inside the container in the form `["VAR=value", ...]`. A variable without `=` is removed from the environment, rather than to have an empty value.
     * 
     */
    Env?: string[];
    /**
     * Command to run specified as a string or an array of strings.
     */
    Cmd?: string[];
    Healthcheck?: HealthConfig;
    /**
     * Command is already escaped (Windows only)
     */
    ArgsEscaped?: boolean;
    /**
     * The name of the image to use when creating the container
     */
    Image?: string;
    /**
     * An object mapping mount point paths inside the container to empty objects.
     */
    Volumes?: {
        [name: string]: "[object Object]";
    };
    /**
     * The working directory for commands to run in.
     */
    WorkingDir?: string;
    /**
     * The entry point for the container as a string or an array of strings.
     * 
     * If the array consists of exactly one empty string (`[""]`) then the entry point is reset to system default (i.e., the entry point used by docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`).
     * 
     */
    Entrypoint?: string[];
    /**
     * Disable networking for the container.
     */
    NetworkDisabled?: boolean;
    /**
     * MAC address of the container.
     */
    MacAddress?: string;
    /**
     * `ONBUILD` metadata that were defined in the image's `Dockerfile`.
     */
    OnBuild?: string[];
    /**
     * User-defined key/value metadata.
     */
    Labels?: {
        [name: string]: string;
    };
    /**
     * Signal to stop a container as a string or unsigned integer.
     */
    StopSignal?: string;
    /**
     * Timeout to stop a container in seconds.
     */
    StopTimeout?: number;
    /**
     * Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell.
     */
    Shell?: string[];
}
export type ContainerSummary = {
    /**
     * The ID of this container
     */
    Id?: string;
    /**
     * The names that this container has been given
     */
    Names?: string[];
    /**
     * The name of the image used when creating this container
     */
    Image?: string;
    /**
     * The ID of the image that this container was created from
     */
    ImageID?: string;
    /**
     * Command to run when starting the container
     */
    Command?: string;
    /**
     * When the container was created
     */
    Created?: number; // int64
    /**
     * The ports exposed by this container
     */
    Ports?: Port[];
    /**
     * The size of files that have been created or changed by this container
     */
    SizeRw?: number; // int64
    /**
     * The total size of all the files in this container
     */
    SizeRootFs?: number; // int64
    /**
     * User-defined key/value metadata.
     */
    Labels?: {
        [name: string]: string;
    };
    /**
     * The state of this container (e.g. `Exited`)
     */
    State?: string;
    /**
     * Additional human-readable status of this container (e.g. `Exit 0`)
     */
    Status?: string;
    HostConfig?: {
        NetworkMode?: string;
    };
    /**
     * A summary of the container's network settings
     */
    NetworkSettings?: {
        Networks?: {
            [name: string]: EndpointSettings;
        };
    };
    Mounts?: Mount[];
}[];
export interface CreateImageInfo {
    id?: string;
    error?: string;
    status?: string;
    progress?: string;
    progressDetail?: ProgressDetail;
}
/**
 * A device mapping between the host and container
 * example:
 * [object Object]
 */
export interface DeviceMapping {
    PathOnHost?: string;
    PathInContainer?: string;
    CgroupPermissions?: string;
}
/**
 * Driver represents a driver (network, logging, secrets).
 */
export interface Driver {
    /**
     * Name of the driver.
     * example:
     * some-driver
     */
    Name: string;
    /**
     * Key/value map of driver-specific options.
     * example:
     * [object Object]
     */
    Options?: {
        [name: string]: string;
    };
}
/**
 * EndpointIPAMConfig represents an endpoint's IPAM configuration.
 * 
 */
export interface EndpointIPAMConfig {
    /**
     * example:
     * 172.20.30.33
     */
    IPv4Address?: string;
    /**
     * example:
     * 2001:db8:abcd::3033
     */
    IPv6Address?: string;
    /**
     * example:
     * 169.254.34.68,fe80::3468
     */
    LinkLocalIPs?: string[];
}
export interface EndpointPortConfig {
    Name?: string;
    Protocol: "tcp" | "udp" | "sctp";
    /**
     * The port inside the container.
     */
    TargetPort: number;
    /**
     * The port on the swarm hosts.
     */
    PublishedPort: number;
    /**
     * The mode in which port is published.
     * 
     * <p><br /></p>
     * 
     * - "ingress" makes the target port accessible on on every node,
     *   regardless of whether there is a task for the service running on
     *   that node or not.
     * - "host" bypasses the routing mesh and publish the port directly on
     *   the swarm node where that service is running.
     * 
     * example:
     * ingress
     */
    PublishMode: "ingress" | "host";
}
/**
 * Configuration for a network endpoint.
 */
export interface EndpointSettings {
    IPAMConfig?: EndpointIPAMConfig;
    /**
     * example:
     * container_1,container_2
     */
    Links?: string[];
    /**
     * example:
     * server_x,server_y
     */
    Aliases?: string[];
    /**
     * Unique ID of the network.
     * 
     * example:
     * 08754567f1f40222263eab4102e1c733ae697e8e354aa9cd6e18d7402835292a
     */
    NetworkID?: string;
    /**
     * Unique ID for the service endpoint in a Sandbox.
     * 
     * example:
     * b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b
     */
    EndpointID?: string;
    /**
     * Gateway address for this network.
     * 
     * example:
     * 172.17.0.1
     */
    Gateway?: string;
    /**
     * IPv4 address.
     * 
     * example:
     * 172.17.0.4
     */
    IPAddress?: string;
    /**
     * Mask length of the IPv4 address.
     * 
     * example:
     * 16
     */
    IPPrefixLen?: number;
    /**
     * IPv6 gateway address.
     * 
     * example:
     * 2001:db8:2::100
     */
    IPv6Gateway?: string;
    /**
     * Global IPv6 address.
     * 
     * example:
     * 2001:db8::5689
     */
    GlobalIPv6Address?: string;
    /**
     * Mask length of the global IPv6 address.
     * 
     * example:
     * 64
     */
    GlobalIPv6PrefixLen?: number; // int64
    /**
     * MAC address for the endpoint on this network.
     * 
     * example:
     * 02:42:ac:11:00:04
     */
    MacAddress?: string;
    /**
     * DriverOpts is a mapping of driver options and values. These options
     * are passed directly to the driver and are driver specific.
     * 
     * example:
     * [object Object]
     */
    DriverOpts?: {
        [name: string]: string;
    };
}
/**
 * Properties that can be configured to access and load balance a service.
 */
export interface EndpointSpec {
    /**
     * The mode of resolution to use for internal load balancing between tasks.
     */
    Mode?: "vip" | "dnsrr";
    /**
     * List of exposed ports that this service is accessible on from the outside. Ports can only be provided if `vip` resolution mode is used.
     */
    Ports?: EndpointPortConfig[];
}
/**
 * EngineDescription provides information about an engine.
 */
export interface EngineDescription {
    /**
     * example:
     * 17.06.0
     */
    EngineVersion?: string;
    /**
     * example:
     * [object Object]
     */
    Labels?: {
        [name: string]: string;
    };
    /**
     * example:
     * [object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object]
     */
    Plugins?: {
        Type?: string;
        Name?: string;
    }[];
}
export interface ErrorDetail {
    code?: number;
    message?: string;
}
/**
 * Represents an error.
 * example:
 * [object Object]
 */
export interface ErrorResponse {
    /**
     * The error message.
     */
    message: string;
}
/**
 * User-defined resources can be either Integer resources (e.g, `SSD=3`) or String resources (e.g, `GPU=UUID1`)
 * example:
 * [object Object],[object Object],[object Object]
 */
export type GenericResources = {
    NamedResourceSpec?: {
        Kind?: string;
        Value?: string;
    };
    DiscreteResourceSpec?: {
        Kind?: string;
        Value?: number; // int64
    };
}[];
/**
 * Information about a container's graph driver.
 */
export interface GraphDriverData {
    Name: string;
    Data: {
        [name: string]: string;
    };
}
/**
 * A test to perform to check that the container is healthy.
 */
export interface HealthConfig {
    /**
     * The test to perform. Possible values are:
     * 
     * - `[]` inherit healthcheck from image or parent image
     * - `["NONE"]` disable healthcheck
     * - `["CMD", args...]` exec arguments directly
     * - `["CMD-SHELL", command]` run command with system's default shell
     * 
     */
    Test?: string[];
    /**
     * The time to wait between checks in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit.
     */
    Interval?: number;
    /**
     * The time to wait before considering the check to have hung. It should be 0 or at least 1000000 (1 ms). 0 means inherit.
     */
    Timeout?: number;
    /**
     * The number of consecutive failures needed to consider a container as unhealthy. 0 means inherit.
     */
    Retries?: number;
    /**
     * Start period for the container to initialize before starting health-retries countdown in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit.
     */
    StartPeriod?: number;
}
/**
 * A container's resources (cgroups config, ulimits, etc)
 */
export interface HostConfig {
    /**
     * An integer value representing this container's relative CPU weight versus other containers.
     */
    CpuShares?: number;
    /**
     * Memory limit in bytes.
     */
    Memory?: number; // int64
    /**
     * Path to `cgroups` under which the container's `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist.
     */
    CgroupParent?: string;
    /**
     * Block IO weight (relative weight).
     */
    BlkioWeight?: number;
    /**
     * Block IO weight (relative device weight) in the form `[{"Path": "device_path", "Weight": weight}]`.
     * 
     */
    BlkioWeightDevice?: {
        Path?: string;
        Weight?: number;
    }[];
    /**
     * Limit read rate (bytes per second) from a device, in the form `[{"Path": "device_path", "Rate": rate}]`.
     * 
     */
    BlkioDeviceReadBps?: ThrottleDevice[];
    /**
     * Limit write rate (bytes per second) to a device, in the form `[{"Path": "device_path", "Rate": rate}]`.
     * 
     */
    BlkioDeviceWriteBps?: ThrottleDevice[];
    /**
     * Limit read rate (IO per second) from a device, in the form `[{"Path": "device_path", "Rate": rate}]`.
     * 
     */
    BlkioDeviceReadIOps?: ThrottleDevice[];
    /**
     * Limit write rate (IO per second) to a device, in the form `[{"Path": "device_path", "Rate": rate}]`.
     * 
     */
    BlkioDeviceWriteIOps?: ThrottleDevice[];
    /**
     * The length of a CPU period in microseconds.
     */
    CpuPeriod?: number; // int64
    /**
     * Microseconds of CPU time that the container can get in a CPU period.
     */
    CpuQuota?: number; // int64
    /**
     * The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks.
     */
    CpuRealtimePeriod?: number; // int64
    /**
     * The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks.
     */
    CpuRealtimeRuntime?: number; // int64
    /**
     * CPUs in which to allow execution (e.g., `0-3`, `0,1`)
     * example:
     * 0-3
     */
    CpusetCpus?: string;
    /**
     * Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.
     */
    CpusetMems?: string;
    /**
     * A list of devices to add to the container.
     */
    Devices?: DeviceMapping[];
    /**
     * a list of cgroup rules to apply to the container
     */
    DeviceCgroupRules?: string[];
    /**
     * Disk limit (in bytes).
     */
    DiskQuota?: number; // int64
    /**
     * Kernel memory limit in bytes.
     */
    KernelMemory?: number; // int64
    /**
     * Memory soft limit in bytes.
     */
    MemoryReservation?: number; // int64
    /**
     * Total memory limit (memory + swap). Set as `-1` to enable unlimited swap.
     */
    MemorySwap?: number; // int64
    /**
     * Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100.
     */
    MemorySwappiness?: number; // int64
    /**
     * CPU quota in units of 10<sup>-9</sup> CPUs.
     */
    NanoCPUs?: number; // int64
    /**
     * Disable OOM Killer for the container.
     */
    OomKillDisable?: boolean;
    /**
     * Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used.
     */
    Init?: boolean;
    /**
     * Tune a container's pids limit. Set -1 for unlimited.
     */
    PidsLimit?: number; // int64
    /**
     * A list of resource limits to set in the container. For example: `{"Name": "nofile", "Soft": 1024, "Hard": 2048}`"
     * 
     */
    Ulimits?: {
        /**
         * Name of ulimit
         */
        Name?: string;
        /**
         * Soft limit
         */
        Soft?: number;
        /**
         * Hard limit
         */
        Hard?: number;
    }[];
    /**
     * The number of usable CPUs (Windows only).
     * 
     * On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
     * 
     */
    CpuCount?: number; // int64
    /**
     * The usable percentage of the available CPUs (Windows only).
     * 
     * On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
     * 
     */
    CpuPercent?: number; // int64
    /**
     * Maximum IOps for the container system drive (Windows only)
     */
    IOMaximumIOps?: number; // int64
    /**
     * Maximum IO in bytes per second for the container system drive (Windows only)
     */
    IOMaximumBandwidth?: number; // int64
    /**
     * A list of volume bindings for this container. Each volume binding is a string in one of these forms:
     * 
     * - `host-src:container-dest` to bind-mount a host path into the container. Both `host-src`, and `container-dest` must be an _absolute_ path.
     * - `host-src:container-dest:ro` to make the bind mount read-only inside the container. Both `host-src`, and `container-dest` must be an _absolute_ path.
     * - `volume-name:container-dest` to bind-mount a volume managed by a volume driver into the container. `container-dest` must be an _absolute_ path.
     * - `volume-name:container-dest:ro` to mount the volume read-only inside the container.  `container-dest` must be an _absolute_ path.
     * 
     */
    Binds?: string[];
    /**
     * Path to a file where the container ID is written
     */
    ContainerIDFile?: string;
    /**
     * The logging configuration for this container
     */
    LogConfig?: {
        Type?: "json-file" | "syslog" | "journald" | "gelf" | "fluentd" | "awslogs" | "splunk" | "etwlogs" | "none";
        Config?: {
            [name: string]: string;
        };
    };
    /**
     * Network mode to use for this container. Supported standard values are: `bridge`, `host`, `none`, and `container:<name|id>`. Any other value is taken as a custom network's name to which this container should connect to.
     */
    NetworkMode?: string;
    PortBindings?: PortMap;
    RestartPolicy?: RestartPolicy;
    /**
     * Automatically remove the container when the container's process exits. This has no effect if `RestartPolicy` is set.
     */
    AutoRemove?: boolean;
    /**
     * Driver that this container uses to mount volumes.
     */
    VolumeDriver?: string;
    /**
     * A list of volumes to inherit from another container, specified in the form `<container name>[:<ro|rw>]`.
     */
    VolumesFrom?: string[];
    /**
     * Specification for mounts to be added to the container.
     */
    Mounts?: Mount[];
    /**
     * A list of kernel capabilities to add to the container.
     */
    CapAdd?: string[];
    /**
     * A list of kernel capabilities to drop from the container.
     */
    CapDrop?: string[];
    /**
     * A list of DNS servers for the container to use.
     */
    Dns?: string[];
    /**
     * A list of DNS options.
     */
    DnsOptions?: string[];
    /**
     * A list of DNS search domains.
     */
    DnsSearch?: string[];
    /**
     * A list of hostnames/IP mappings to add to the container's `/etc/hosts` file. Specified in the form `["hostname:IP"]`.
     * 
     */
    ExtraHosts?: string[];
    /**
     * A list of additional groups that the container process will run as.
     */
    GroupAdd?: string[];
    /**
     * IPC sharing mode for the container. Possible values are:
     * 
     * - `"none"`: own private IPC namespace, with /dev/shm not mounted
     * - `"private"`: own private IPC namespace
     * - `"shareable"`: own private IPC namespace, with a possibility to share it with other containers
     * - `"container:<name|id>"`: join another (shareable) container's IPC namespace
     * - `"host"`: use the host system's IPC namespace
     * 
     * If not specified, daemon default is used, which can either be `"private"`
     * or `"shareable"`, depending on daemon version and configuration.
     * 
     */
    IpcMode?: string;
    /**
     * Cgroup to use for the container.
     */
    Cgroup?: string;
    /**
     * A list of links for the container in the form `container_name:alias`.
     */
    Links?: string[];
    /**
     * An integer value containing the score given to the container in order to tune OOM killer preferences.
     * example:
     * 500
     */
    OomScoreAdj?: number;
    /**
     * Set the PID (Process) Namespace mode for the container. It can be either:
     * 
     * - `"container:<name|id>"`: joins another container's PID namespace
     * - `"host"`: use the host's PID namespace inside the container
     * 
     */
    PidMode?: string;
    /**
     * Gives the container full access to the host.
     */
    Privileged?: boolean;
    /**
     * Allocates an ephemeral host port for all of a container's
     * exposed ports.
     * 
     * Ports are de-allocated when the container stops and allocated when the container starts.
     * The allocated port might be changed when restarting the container.
     * 
     * The port is selected from the ephemeral port range that depends on the kernel.
     * For example, on Linux the range is defined by `/proc/sys/net/ipv4/ip_local_port_range`.
     * 
     */
    PublishAllPorts?: boolean;
    /**
     * Mount the container's root filesystem as read only.
     */
    ReadonlyRootfs?: boolean;
    /**
     * A list of string values to customize labels for MLS systems, such as SELinux.
     */
    SecurityOpt?: string[];
    /**
     * Storage driver options for this container, in the form `{"size": "120G"}`.
     * 
     */
    StorageOpt?: {
        [name: string]: string;
    };
    /**
     * A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example: `{ "/run": "rw,noexec,nosuid,size=65536k" }`.
     * 
     */
    Tmpfs?: {
        [name: string]: string;
    };
    /**
     * UTS namespace to use for the container.
     */
    UTSMode?: string;
    /**
     * Sets the usernamespace mode for the container when usernamespace remapping option is enabled.
     */
    UsernsMode?: string;
    /**
     * Size of `/dev/shm` in bytes. If omitted, the system uses 64MB.
     */
    ShmSize?: number;
    /**
     * A list of kernel parameters (sysctls) to set in the container. For example: `{"net.ipv4.ip_forward": "1"}`
     * 
     */
    Sysctls?: {
        [name: string]: string;
    };
    /**
     * Runtime to use with this container.
     */
    Runtime?: string;
    /**
     * Initial console size, as an `[height, width]` array. (Windows only)
     */
    ConsoleSize?: number[];
    /**
     * Isolation technology of the container. (Windows only)
     */
    Isolation?: "default" | "process" | "hyperv";
}
export interface IPAM {
    /**
     * Name of the IPAM driver to use.
     */
    Driver?: string;
    /**
     * List of IPAM configuration options, specified as a map: `{"Subnet": <CIDR>, "IPRange": <CIDR>, "Gateway": <IP address>, "AuxAddress": <device_name:IP address>}`
     */
    Config?: {
        [name: string]: string;
    }[];
    /**
     * Driver-specific options, specified as a map.
     */
    Options?: {
        [name: string]: string;
    }[];
}
/**
 * Response to an API call that returns just an Id
 */
export interface IdResponse {
    /**
     * The id of the newly created object.
     */
    Id: string;
}
export interface Image {
    Id: string;
    RepoTags?: string[];
    RepoDigests?: string[];
    Parent: string;
    Comment: string;
    Created: string;
    Container: string;
    ContainerConfig?: ContainerConfig;
    DockerVersion: string;
    Author: string;
    Config?: ContainerConfig;
    Architecture: string;
    Os: string;
    OsVersion?: string;
    Size: number; // int64
    VirtualSize: number; // int64
    GraphDriver: GraphDriverData;
    RootFS: {
        Type: string;
        Layers?: string[];
        BaseLayer?: string;
    };
    Metadata?: {
        LastTagTime?: string; // dateTime
    };
}
export interface ImageDeleteResponseItem {
    /**
     * The image ID of an image that was untagged
     */
    Untagged?: string;
    /**
     * The image ID of an image that was deleted
     */
    Deleted?: string;
}
/**
 * Image ID or Digest
 * example:
 * [object Object]
 */
export interface ImageID {
    ID?: string;
}
export interface ImageSummary {
    Id: string;
    ParentId: string;
    RepoTags: string[];
    RepoDigests: string[];
    Created: number;
    Size: number;
    SharedSize: number;
    VirtualSize: number;
    Labels: {
        [name: string]: string;
    };
    Containers: number;
}
/**
 * IndexInfo contains information about a registry.
 */
export interface IndexInfo {
    /**
     * Name of the registry, such as "docker.io".
     * 
     * example:
     * docker.io
     */
    Name?: string;
    /**
     * List of mirrors, expressed as URIs.
     * 
     * example:
     * https://hub-mirror.corp.example.com:5000/,https://registry-2.docker.io/,https://registry-3.docker.io/
     */
    Mirrors?: string[];
    /**
     * Indicates if the the registry is part of the list of insecure
     * registries.
     * 
     * If `false`, the registry is insecure. Insecure registries accept
     * un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from
     * unknown CAs) communication.
     * 
     * > **Warning**: Insecure registries can be useful when running a local
     * > registry. However, because its use creates security vulnerabilities
     * > it should ONLY be enabled for testing purposes. For increased
     * > security, users should add their CA to their system's list of
     * > trusted CAs instead of enabling this option.
     * 
     * example:
     * true
     */
    Secure?: boolean;
    /**
     * Indicates whether this is an official registry (i.e., Docker Hub / docker.io)
     * 
     * example:
     * true
     */
    Official?: boolean;
}
/**
 * JoinTokens contains the tokens workers and managers need to join the swarm.
 * 
 */
export interface JoinTokens {
    /**
     * The token workers can use to join the swarm.
     * 
     * example:
     * SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-1awxwuwd3z9j1z3puu7rcgdbx
     */
    Worker?: string;
    /**
     * The token managers can use to join the swarm.
     * 
     * example:
     * SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2
     */
    Manager?: string;
}
/**
 * Current local status of this node.
 * example:
 * active
 */
export type LocalNodeState = "" | "inactive" | "pending" | "active" | "error" | "locked";
/**
 * ManagerStatus represents the status of a manager.
 * 
 * It provides the current status of a node's manager component, if the node
 * is a manager.
 * 
 */
export interface ManagerStatus {
    /**
     * example:
     * true
     */
    Leader?: boolean;
    Reachability?: Reachability;
    /**
     * The IP address and port at which the manager is reachable.
     * 
     * example:
     * 10.0.0.46:2377
     */
    Addr?: string;
}
export interface Mount {
    /**
     * Container path.
     */
    Target: string;
    /**
     * Mount source (e.g. a volume name, a host path).
     */
    Source: string;
    /**
     * The mount type. Available types:
     * 
     * - `bind` Mounts a file or directory from the host into the container. Must exist prior to creating the container.
     * - `volume` Creates a volume with the given name and options (or uses a pre-existing volume with the same name and options). These are **not** removed when the container is removed.
     * - `tmpfs` Create a tmpfs with the given options. The mount source cannot be specified for tmpfs.
     * 
     */
    Type: "bind" | "volume" | "tmpfs";
    /**
     * Whether the mount should be read-only.
     */
    ReadOnly?: boolean;
    /**
     * The consistency requirement for the mount: `default`, `consistent`, `cached`, or `delegated`.
     */
    Consistency?: string;
    /**
     * Optional configuration for the `bind` type.
     */
    BindOptions?: {
        /**
         * A propagation mode with the value `[r]private`, `[r]shared`, or `[r]slave`.
         */
        Propagation?: "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave";
    };
    /**
     * Optional configuration for the `volume` type.
     */
    VolumeOptions?: {
        /**
         * Populate volume with data from the target.
         */
        NoCopy?: boolean;
        /**
         * User-defined key/value metadata.
         */
        Labels?: {
            [name: string]: string;
        };
        /**
         * Map of driver specific options
         */
        DriverConfig?: {
            /**
             * Name of the driver to use to create the volume.
             */
            Name?: string;
            /**
             * key/value map of driver specific options.
             */
            Options?: {
                [name: string]: string;
            };
        };
    };
    /**
     * Optional configuration for the `tmpfs` type.
     */
    TmpfsOptions?: {
        /**
         * The size for the tmpfs mount in bytes.
         */
        SizeBytes?: number; // int64
        /**
         * The permission mode for the tmpfs mount in an integer.
         */
        Mode?: number;
    };
}
/**
 * A mount point inside a container
 */
export interface MountPoint {
    Type?: string;
    Name?: string;
    Source?: string;
    Destination?: string;
    Driver?: string;
    Mode?: string;
    RW?: boolean;
    Propagation?: string;
}
/**
 * example:
 * [object Object]
 */
export interface Network {
    Name: string;
    Id: string;
    Created?: string; // dateTime
    Scope?: string;
    Driver: string;
    EnableIPv6?: boolean;
    IPAM?: IPAM;
    Internal?: boolean;
    Attachable?: boolean;
    Ingress?: boolean;
    Containers?: {
        [name: string]: NetworkContainer;
    };
    Options?: {
        [name: string]: string;
    };
    Labels?: {
        [name: string]: string;
    };
}
export interface NetworkContainer {
    Name?: string;
    EndpointID?: string;
    MacAddress?: string;
    IPv4Address?: string;
    IPv6Address?: string;
}
/**
 * NetworkSettings exposes the network settings in the API
 */
export interface NetworkSettings {
    /**
     * Name of the network'a bridge (for example, `docker0`).
     * example:
     * docker0
     */
    Bridge?: string;
    /**
     * SandboxID uniquely represents a container's network stack.
     * example:
     * 9d12daf2c33f5959c8bf90aa513e4f65b561738661003029ec84830cd503a0c3
     */
    SandboxID?: string;
    /**
     * Indicates if hairpin NAT should be enabled on the virtual interface.
     * 
     * example:
     * false
     */
    HairpinMode?: boolean;
    /**
     * IPv6 unicast address using the link-local prefix.
     * example:
     * fe80::42:acff:fe11:1
     */
    LinkLocalIPv6Address?: string;
    /**
     * Prefix length of the IPv6 unicast address.
     * example:
     * 64
     */
    LinkLocalIPv6PrefixLen?: number;
    Ports?: PortMap;
    /**
     * SandboxKey identifies the sandbox
     * example:
     * /var/run/docker/netns/8ab54b426c38
     */
    SandboxKey?: string;
    /**
     * 
     */
    SecondaryIPAddresses?: Address[];
    /**
     * 
     */
    SecondaryIPv6Addresses?: Address[];
    /**
     * EndpointID uniquely represents a service endpoint in a Sandbox.
     * 
     * <p><br /></p>
     * 
     * > **Deprecated**: This field is only propagated when attached to the
     * > default "bridge" network. Use the information from the "bridge"
     * > network inside the `Networks` map instead, which contains the same
     * > information. This field was deprecated in Docker 1.9 and is scheduled
     * > to be removed in Docker 17.12.0
     * 
     * example:
     * b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b
     */
    EndpointID?: string;
    /**
     * Gateway address for the default "bridge" network.
     * 
     * <p><br /></p>
     * 
     * > **Deprecated**: This field is only propagated when attached to the
     * > default "bridge" network. Use the information from the "bridge"
     * > network inside the `Networks` map instead, which contains the same
     * > information. This field was deprecated in Docker 1.9 and is scheduled
     * > to be removed in Docker 17.12.0
     * 
     * example:
     * 172.17.0.1
     */
    Gateway?: string;
    /**
     * Global IPv6 address for the default "bridge" network.
     * 
     * <p><br /></p>
     * 
     * > **Deprecated**: This field is only propagated when attached to the
     * > default "bridge" network. Use the information from the "bridge"
     * > network inside the `Networks` map instead, which contains the same
     * > information. This field was deprecated in Docker 1.9 and is scheduled
     * > to be removed in Docker 17.12.0
     * 
     * example:
     * 2001:db8::5689
     */
    GlobalIPv6Address?: string;
    /**
     * Mask length of the global IPv6 address.
     * 
     * <p><br /></p>
     * 
     * > **Deprecated**: This field is only propagated when attached to the
     * > default "bridge" network. Use the information from the "bridge"
     * > network inside the `Networks` map instead, which contains the same
     * > information. This field was deprecated in Docker 1.9 and is scheduled
     * > to be removed in Docker 17.12.0
     * 
     * example:
     * 64
     */
    GlobalIPv6PrefixLen?: number;
    /**
     * IPv4 address for the default "bridge" network.
     * 
     * <p><br /></p>
     * 
     * > **Deprecated**: This field is only propagated when attached to the
     * > default "bridge" network. Use the information from the "bridge"
     * > network inside the `Networks` map instead, which contains the same
     * > information. This field was deprecated in Docker 1.9 and is scheduled
     * > to be removed in Docker 17.12.0
     * 
     * example:
     * 172.17.0.4
     */
    IPAddress?: string;
    /**
     * Mask length of the IPv4 address.
     * 
     * <p><br /></p>
     * 
     * > **Deprecated**: This field is only propagated when attached to the
     * > default "bridge" network. Use the information from the "bridge"
     * > network inside the `Networks` map instead, which contains the same
     * > information. This field was deprecated in Docker 1.9 and is scheduled
     * > to be removed in Docker 17.12.0
     * 
     * example:
     * 16
     */
    IPPrefixLen?: number;
    /**
     * IPv6 gateway address for this network.
     * 
     * <p><br /></p>
     * 
     * > **Deprecated**: This field is only propagated when attached to the
     * > default "bridge" network. Use the information from the "bridge"
     * > network inside the `Networks` map instead, which contains the same
     * > information. This field was deprecated in Docker 1.9 and is scheduled
     * > to be removed in Docker 17.12.0
     * 
     * example:
     * 2001:db8:2::100
     */
    IPv6Gateway?: string;
    /**
     * MAC address for the container on the default "bridge" network.
     * 
     * <p><br /></p>
     * 
     * > **Deprecated**: This field is only propagated when attached to the
     * > default "bridge" network. Use the information from the "bridge"
     * > network inside the `Networks` map instead, which contains the same
     * > information. This field was deprecated in Docker 1.9 and is scheduled
     * > to be removed in Docker 17.12.0
     * 
     * example:
     * 02:42:ac:11:00:04
     */
    MacAddress?: string;
    /**
     * Information about all networks that the container is connected to.
     * 
     */
    Networks?: {
        [name: string]: EndpointSettings;
    };
}
export interface Node {
    /**
     * example:
     * 24ifsmvkjbyhk
     */
    ID?: string;
    Version?: ObjectVersion;
    /**
     * Date and time at which the node was added to the swarm in
     * [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
     * 
     * example:
     * 2016-08-18T10:44:24.496525531Z
     */
    CreatedAt?: string; // dateTime
    /**
     * Date and time at which the node was last updated in
     * [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
     * 
     * example:
     * 2017-08-09T07:09:37.632105588Z
     */
    UpdatedAt?: string; // dateTime
    Spec?: NodeSpec;
    Description?: NodeDescription;
    Status?: NodeStatus;
    ManagerStatus?: ManagerStatus;
}
/**
 * NodeDescription encapsulates the properties of the Node as reported by the
 * agent.
 * 
 */
export interface NodeDescription {
    /**
     * example:
     * bf3067039e47
     */
    Hostname?: string;
    Platform?: Platform;
    Resources?: ResourceObject;
    Engine?: EngineDescription;
    TLSInfo?: TLSInfo;
}
/**
 * example:
 * [object Object]
 */
export interface NodeSpec {
    /**
     * Name for the node.
     * example:
     * my-node
     */
    Name?: string;
    /**
     * User-defined key/value metadata.
     */
    Labels?: {
        [name: string]: string;
    };
    /**
     * Role of the node.
     * example:
     * manager
     */
    Role?: "worker" | "manager";
    /**
     * Availability of the node.
     * example:
     * active
     */
    Availability?: "active" | "pause" | "drain";
}
/**
 * NodeState represents the state of a node.
 * example:
 * ready
 */
export type NodeState = "unknown" | "down" | "ready" | "disconnected";
/**
 * NodeStatus represents the status of a node.
 * 
 * It provides the current status of the node, as seen by the manager.
 * 
 */
export interface NodeStatus {
    State?: NodeState;
    /**
     * example:
     * 
     */
    Message?: string;
    /**
     * IP address of the node.
     * example:
     * 172.17.0.2
     */
    Addr?: string;
}
/**
 * The version number of the object such as node, service, etc. This is needed to avoid conflicting writes.
 * The client must send the version number along with the modified specification when updating these objects.
 * This approach ensures safe concurrency and determinism in that the change on the object
 * may not be applied if the version number has changed from the last read. In other words,
 * if two update requests specify the same base version, only one of the requests can succeed.
 * As a result, two separate update requests that happen at the same time will not
 * unintentionally overwrite each other.
 * 
 */
export interface ObjectVersion {
    /**
     * example:
     * 373531
     */
    Index?: number; // uint64
}
/**
 * Represents a peer-node in the swarm
 */
export interface PeerNode {
    /**
     * Unique identifier of for this node in the swarm.
     */
    NodeID?: string;
    /**
     * IP address and ports at which this node can be reached.
     * 
     */
    Addr?: string;
}
/**
 * Platform represents the platform (Arch/OS).
 * 
 */
export interface Platform {
    /**
     * Architecture represents the hardware architecture (for example,
     * `x86_64`).
     * 
     * example:
     * x86_64
     */
    Architecture?: string;
    /**
     * OS represents the Operating System (for example, `linux` or `windows`).
     * 
     * example:
     * linux
     */
    OS?: string;
}
/**
 * A plugin for the Engine API
 */
export interface Plugin {
    /**
     * example:
     * 5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078
     */
    Id?: string;
    /**
     * example:
     * tiborvass/sample-volume-plugin
     */
    Name: string;
    /**
     * True if the plugin is running. False if the plugin is not running, only installed.
     * example:
     * true
     */
    Enabled: boolean;
    /**
     * Settings that can be modified by users.
     */
    Settings: {
        Mounts: PluginMount[];
        /**
         * example:
         * DEBUG=0
         */
        Env: string[];
        Args: string[];
        Devices: PluginDevice[];
    };
    /**
     * plugin remote reference used to push/pull the plugin
     * example:
     * localhost:5000/tiborvass/sample-volume-plugin:latest
     */
    PluginReference?: string;
    /**
     * The config of a plugin.
     */
    Config: {
        /**
         * Docker Version used to create the plugin
         * example:
         * 17.06.0-ce
         */
        DockerVersion?: string;
        /**
         * example:
         * A sample volume plugin for Docker
         */
        Description: string;
        /**
         * example:
         * https://docs.docker.com/engine/extend/plugins/
         */
        Documentation: string;
        /**
         * The interface between Docker and the plugin
         */
        Interface: {
            /**
             * example:
             * docker.volumedriver/1.0
             */
            Types: PluginInterfaceType[];
            /**
             * example:
             * plugins.sock
             */
            Socket: string;
        };
        /**
         * example:
         * /usr/bin/sample-volume-plugin,/data
         */
        Entrypoint: string[];
        /**
         * example:
         * /bin/
         */
        WorkDir: string;
        User?: {
            /**
             * example:
             * 1000
             */
            UID?: number; // uint32
            /**
             * example:
             * 1000
             */
            GID?: number; // uint32
        };
        Network: {
            /**
             * example:
             * host
             */
            Type: string;
        };
        Linux: {
            /**
             * example:
             * CAP_SYS_ADMIN,CAP_SYSLOG
             */
            Capabilities: string[];
            /**
             * example:
             * false
             */
            AllowAllDevices: boolean;
            Devices: PluginDevice[];
        };
        /**
         * example:
         * /mnt/volumes
         */
        PropagatedMount: string;
        /**
         * example:
         * false
         */
        IpcHost: boolean;
        /**
         * example:
         * false
         */
        PidHost: boolean;
        Mounts: PluginMount[];
        /**
         * example:
         * [object Object]
         */
        Env: PluginEnv[];
        Args: {
            /**
             * example:
             * args
             */
            Name: string;
            /**
             * example:
             * command line arguments
             */
            Description: string;
            Settable: string[];
            Value: string[];
        };
        rootfs?: {
            /**
             * example:
             * layers
             */
            type?: string;
            /**
             * example:
             * sha256:675532206fbf3030b8458f88d6e26d4eb1577688a25efec97154c94e8b6b4887,sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8
             */
            diff_ids?: string[];
        };
    };
}
export interface PluginDevice {
    Name: string;
    Description: string;
    Settable: string[];
    /**
     * example:
     * /dev/fuse
     */
    Path: string;
}
export interface PluginEnv {
    Name: string;
    Description: string;
    Settable: string[];
    Value: string;
}
export interface PluginInterfaceType {
    Prefix: string;
    Capability: string;
    Version: string;
}
export interface PluginMount {
    /**
     * example:
     * some-mount
     */
    Name: string;
    /**
     * example:
     * This is a mount that's used by the plugin.
     */
    Description: string;
    Settable: string[];
    /**
     * example:
     * /var/lib/docker/plugins/
     */
    Source: string;
    /**
     * example:
     * /mnt/state
     */
    Destination: string;
    /**
     * example:
     * bind
     */
    Type: string;
    /**
     * example:
     * rbind,rw
     */
    Options: string[];
}
/**
 * Available plugins per type.
 * 
 * <p><br /></p>
 * 
 * > **Note**: Only unmanaged (V1) plugins are included in this list.
 * > V1 plugins are "lazily" loaded, and are not returned in this list
 * > if there is no resource using the plugin.
 * 
 */
export interface PluginsInfo {
    /**
     * Names of available volume-drivers, and network-driver plugins.
     * example:
     * local
     */
    Volume?: string[];
    /**
     * Names of available network-drivers, and network-driver plugins.
     * example:
     * bridge,host,ipvlan,macvlan,null,overlay
     */
    Network?: string[];
    /**
     * Names of available authorization plugins.
     * example:
     * img-authz-plugin,hbm
     */
    Authorization?: string[];
    /**
     * Names of available logging-drivers, and logging-driver plugins.
     * example:
     * awslogs,fluentd,gcplogs,gelf,journald,json-file,logentries,splunk,syslog
     */
    Log?: string[];
}
/**
 * An open port on a container
 * example:
 * [object Object]
 */
export interface Port {
    IP?: string; // ip-address
    /**
     * Port on the container
     */
    PrivatePort: number; // uint16
    /**
     * Port exposed on the host
     */
    PublicPort?: number; // uint16
    Type: "tcp" | "udp" | "sctp";
}
/**
 * PortBinding represents a binding between a host IP address and a host
 * port.
 * 
 */
export interface PortBinding {
    /**
     * Host IP address that the container's port is mapped to.
     * example:
     * 127.0.0.1
     */
    HostIp?: string;
    /**
     * Host port number that the container's port is mapped to.
     * example:
     * 4443
     */
    HostPort?: string;
}
/**
 * PortMap describes the mapping of container ports to host ports, using the
 * container's port-number and protocol as key in the format `<port>/<protocol>`,
 * for example, `80/udp`.
 * 
 * If a container's port is mapped for multiple protocols, separate entries
 * are added to the mapping table.
 * 
 * example:
 * [object Object]
 */
export interface PortMap {
    [name: string]: PortBinding[];
}
export interface ProcessConfig {
    privileged?: boolean;
    user?: string;
    tty?: boolean;
    entrypoint?: string;
    arguments?: string[];
}
export interface ProgressDetail {
    current?: number;
    total?: number;
}
export interface PushImageInfo {
    error?: string;
    status?: string;
    progress?: string;
    progressDetail?: ProgressDetail;
}
/**
 * Reachability represents the reachability of a node.
 * example:
 * reachable
 */
export type Reachability = "unknown" | "unreachable" | "reachable";
/**
 * RegistryServiceConfig stores daemon registry services configuration.
 * 
 */
export interface RegistryServiceConfig {
    /**
     * List of IP ranges to which nondistributable artifacts can be pushed,
     * using the CIDR syntax [RFC 4632](https://tools.ietf.org/html/4632).
     * 
     * Some images (for example, Windows base images) contain artifacts
     * whose distribution is restricted by license. When these images are
     * pushed to a registry, restricted artifacts are not included.
     * 
     * This configuration override this behavior, and enables the daemon to
     * push nondistributable artifacts to all registries whose resolved IP
     * address is within the subnet described by the CIDR syntax.
     * 
     * This option is useful when pushing images containing
     * nondistributable artifacts to a registry on an air-gapped network so
     * hosts on that network can pull the images without connecting to
     * another server.
     * 
     * > **Warning**: Nondistributable artifacts typically have restrictions
     * > on how and where they can be distributed and shared. Only use this
     * > feature to push artifacts to private registries and ensure that you
     * > are in compliance with any terms that cover redistributing
     * > nondistributable artifacts.
     * 
     * example:
     * ::1/128,127.0.0.0/8
     */
    AllowNondistributableArtifactsCIDRs?: string[];
    /**
     * List of registry hostnames to which nondistributable artifacts can be
     * pushed, using the format `<hostname>[:<port>]` or `<IP address>[:<port>]`.
     * 
     * Some images (for example, Windows base images) contain artifacts
     * whose distribution is restricted by license. When these images are
     * pushed to a registry, restricted artifacts are not included.
     * 
     * This configuration override this behavior for the specified
     * registries.
     * 
     * This option is useful when pushing images containing
     * nondistributable artifacts to a registry on an air-gapped network so
     * hosts on that network can pull the images without connecting to
     * another server.
     * 
     * > **Warning**: Nondistributable artifacts typically have restrictions
     * > on how and where they can be distributed and shared. Only use this
     * > feature to push artifacts to private registries and ensure that you
     * > are in compliance with any terms that cover redistributing
     * > nondistributable artifacts.
     * 
     * example:
     * registry.internal.corp.example.com:3000,[2001:db8:a0b:12f0::1]:443
     */
    AllowNondistributableArtifactsHostnames?: string[];
    /**
     * List of IP ranges of insecure registries, using the CIDR syntax
     * ([RFC 4632](https://tools.ietf.org/html/4632)). Insecure registries
     * accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates
     * from unknown CAs) communication.
     * 
     * By default, local registries (`127.0.0.0/8`) are configured as
     * insecure. All other registries are secure. Communicating with an
     * insecure registry is not possible if the daemon assumes that registry
     * is secure.
     * 
     * This configuration override this behavior, insecure communication with
     * registries whose resolved IP address is within the subnet described by
     * the CIDR syntax.
     * 
     * Registries can also be marked insecure by hostname. Those registries
     * are listed under `IndexConfigs` and have their `Secure` field set to
     * `false`.
     * 
     * > **Warning**: Using this option can be useful when running a local
     * > registry, but introduces security vulnerabilities. This option
     * > should therefore ONLY be used for testing purposes. For increased
     * > security, users should add their CA to their system's list of trusted
     * > CAs instead of enabling this option.
     * 
     * example:
     * ::1/128,127.0.0.0/8
     */
    InsecureRegistryCIDRs?: string[];
    /**
     * example:
     * [object Object]
     */
    IndexConfigs?: {
        [name: string]: IndexInfo;
    };
    /**
     * List of registry URLs that act as a mirror for the official
     * (`docker.io`) registry.
     * 
     * example:
     * https://hub-mirror.corp.example.com:5000/,https://[2001:db8:a0b:12f0::1]/
     */
    Mirrors?: string[];
}
/**
 * An object describing the resources which can be advertised by a node and requested by a task
 */
export interface ResourceObject {
    /**
     * example:
     * 4000000000
     */
    NanoCPUs?: number; // int64
    /**
     * example:
     * 8272408576
     */
    MemoryBytes?: number; // int64
    GenericResources?: GenericResources;
}
/**
 * A container's resources (cgroups config, ulimits, etc)
 */
export interface Resources {
    /**
     * An integer value representing this container's relative CPU weight versus other containers.
     */
    CpuShares?: number;
    /**
     * Memory limit in bytes.
     */
    Memory?: number; // int64
    /**
     * Path to `cgroups` under which the container's `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist.
     */
    CgroupParent?: string;
    /**
     * Block IO weight (relative weight).
     */
    BlkioWeight?: number;
    /**
     * Block IO weight (relative device weight) in the form `[{"Path": "device_path", "Weight": weight}]`.
     * 
     */
    BlkioWeightDevice?: {
        Path?: string;
        Weight?: number;
    }[];
    /**
     * Limit read rate (bytes per second) from a device, in the form `[{"Path": "device_path", "Rate": rate}]`.
     * 
     */
    BlkioDeviceReadBps?: ThrottleDevice[];
    /**
     * Limit write rate (bytes per second) to a device, in the form `[{"Path": "device_path", "Rate": rate}]`.
     * 
     */
    BlkioDeviceWriteBps?: ThrottleDevice[];
    /**
     * Limit read rate (IO per second) from a device, in the form `[{"Path": "device_path", "Rate": rate}]`.
     * 
     */
    BlkioDeviceReadIOps?: ThrottleDevice[];
    /**
     * Limit write rate (IO per second) to a device, in the form `[{"Path": "device_path", "Rate": rate}]`.
     * 
     */
    BlkioDeviceWriteIOps?: ThrottleDevice[];
    /**
     * The length of a CPU period in microseconds.
     */
    CpuPeriod?: number; // int64
    /**
     * Microseconds of CPU time that the container can get in a CPU period.
     */
    CpuQuota?: number; // int64
    /**
     * The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks.
     */
    CpuRealtimePeriod?: number; // int64
    /**
     * The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks.
     */
    CpuRealtimeRuntime?: number; // int64
    /**
     * CPUs in which to allow execution (e.g., `0-3`, `0,1`)
     * example:
     * 0-3
     */
    CpusetCpus?: string;
    /**
     * Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.
     */
    CpusetMems?: string;
    /**
     * A list of devices to add to the container.
     */
    Devices?: DeviceMapping[];
    /**
     * a list of cgroup rules to apply to the container
     */
    DeviceCgroupRules?: string[];
    /**
     * Disk limit (in bytes).
     */
    DiskQuota?: number; // int64
    /**
     * Kernel memory limit in bytes.
     */
    KernelMemory?: number; // int64
    /**
     * Memory soft limit in bytes.
     */
    MemoryReservation?: number; // int64
    /**
     * Total memory limit (memory + swap). Set as `-1` to enable unlimited swap.
     */
    MemorySwap?: number; // int64
    /**
     * Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100.
     */
    MemorySwappiness?: number; // int64
    /**
     * CPU quota in units of 10<sup>-9</sup> CPUs.
     */
    NanoCPUs?: number; // int64
    /**
     * Disable OOM Killer for the container.
     */
    OomKillDisable?: boolean;
    /**
     * Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used.
     */
    Init?: boolean;
    /**
     * Tune a container's pids limit. Set -1 for unlimited.
     */
    PidsLimit?: number; // int64
    /**
     * A list of resource limits to set in the container. For example: `{"Name": "nofile", "Soft": 1024, "Hard": 2048}`"
     * 
     */
    Ulimits?: {
        /**
         * Name of ulimit
         */
        Name?: string;
        /**
         * Soft limit
         */
        Soft?: number;
        /**
         * Hard limit
         */
        Hard?: number;
    }[];
    /**
     * The number of usable CPUs (Windows only).
     * 
     * On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
     * 
     */
    CpuCount?: number; // int64
    /**
     * The usable percentage of the available CPUs (Windows only).
     * 
     * On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
     * 
     */
    CpuPercent?: number; // int64
    /**
     * Maximum IOps for the container system drive (Windows only)
     */
    IOMaximumIOps?: number; // int64
    /**
     * Maximum IO in bytes per second for the container system drive (Windows only)
     */
    IOMaximumBandwidth?: number; // int64
}
/**
 * The behavior to apply when the container exits. The default is not to restart.
 * 
 * An ever increasing delay (double the previous delay, starting at 100ms) is added before each restart to prevent flooding the server.
 * 
 */
export interface RestartPolicy {
    /**
     * - Empty string means not to restart
     * - `always` Always restart
     * - `unless-stopped` Restart always except when the user has manually stopped the container
     * - `on-failure` Restart only when the container exit code is non-zero
     * 
     */
    Name?: "" | "always" | "unless-stopped" | "on-failure";
    /**
     * If `on-failure` is used, the number of times to retry before giving up
     */
    MaximumRetryCount?: number;
}
/**
 * Runtime describes an [OCI compliant](https://github.com/opencontainers/runtime-spec)
 * runtime.
 * 
 * The runtime is invoked by the daemon via the `containerd` daemon. OCI
 * runtimes act as an interface to the Linux kernel namespaces, cgroups,
 * and SELinux.
 * 
 */
export interface Runtime {
    /**
     * Name and, optional, path, of the OCI executable binary.
     * 
     * If the path is omitted, the daemon searches the host's `$PATH` for the
     * binary and uses the first result.
     * 
     * example:
     * /usr/local/bin/my-oci-runtime
     */
    path?: string;
    /**
     * List of command-line arguments to pass to the runtime when invoked.
     * 
     * example:
     * --debug,--systemd-cgroup=false
     */
    runtimeArgs?: string[];
}
export interface Secret {
    /**
     * example:
     * blt1owaxmitz71s9v5zh81zun
     */
    ID?: string;
    Version?: ObjectVersion;
    /**
     * example:
     * 2017-07-20T13:55:28.678958722Z
     */
    CreatedAt?: string; // dateTime
    /**
     * example:
     * 2017-07-20T13:55:28.678958722Z
     */
    UpdatedAt?: string; // dateTime
    Spec?: SecretSpec;
}
export interface SecretSpec {
    /**
     * User-defined name of the secret.
     */
    Name?: string;
    /**
     * User-defined key/value metadata.
     * example:
     * [object Object]
     */
    Labels?: {
        [name: string]: string;
    };
    /**
     * Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-3.2))
     * data to store as secret.
     * 
     * This field is only used to _create_ a secret, and is not returned by
     * other endpoints.
     * 
     * example:
     * 
     */
    Data?: string;
    /**
     * Name of the secrets driver used to fetch the secret's value from an external secret store
     */
    Driver?: Driver;
    /**
     * Templating driver, if applicable
     * 
     * Templating controls whether and how to evaluate the config payload as
     * a template. If no driver is set, no templating is used.
     * 
     */
    Templating?: Driver;
}
/**
 * example:
 * [object Object]
 */
export interface Service {
    ID?: string;
    Version?: ObjectVersion;
    CreatedAt?: string; // dateTime
    UpdatedAt?: string; // dateTime
    Spec: ServiceSpec;
    Endpoint?: {
        Spec?: EndpointSpec;
        Ports?: EndpointPortConfig[];
        VirtualIPs?: {
            NetworkID?: string;
            Addr?: string;
        }[];
    };
    /**
     * The status of a service update.
     */
    UpdateStatus?: {
        State?: "updating" | "paused" | "completed";
        StartedAt?: string; // dateTime
        CompletedAt?: string; // dateTime
        Message?: string;
    };
}
/**
 * User modifiable configuration for a service.
 */
export interface ServiceSpec {
    /**
     * Name of the service.
     */
    Name: string;
    /**
     * User-defined key/value metadata.
     */
    Labels?: {
        [name: string]: string;
    };
    TaskTemplate: TaskSpec;
    /**
     * Scheduling mode for the service.
     */
    Mode?: {
        Replicated?: {
            Replicas?: number; // int64
        };
        Global?: {
        };
    };
    /**
     * Specification for the update strategy of the service.
     */
    UpdateConfig?: {
        /**
         * Maximum number of tasks to be updated in one iteration (0 means unlimited parallelism).
         */
        Parallelism?: number; // int64
        /**
         * Amount of time between updates, in nanoseconds.
         */
        Delay?: number; // int64
        /**
         * Action to take if an updated task fails to run, or stops running during the update.
         */
        FailureAction?: "continue" | "pause" | "rollback";
        /**
         * Amount of time to monitor each updated task for failures, in nanoseconds.
         */
        Monitor?: number; // int64
        /**
         * The fraction of tasks that may fail during an update before the failure action is invoked, specified as a floating point number between 0 and 1.
         */
        MaxFailureRatio?: number;
        /**
         * The order of operations when rolling out an updated task. Either the old task is shut down before the new task is started, or the new task is started before the old task is shut down.
         */
        Order?: "stop-first" | "start-first";
    };
    /**
     * Specification for the rollback strategy of the service.
     */
    RollbackConfig?: {
        /**
         * Maximum number of tasks to be rolled back in one iteration (0 means unlimited parallelism).
         */
        Parallelism?: number; // int64
        /**
         * Amount of time between rollback iterations, in nanoseconds.
         */
        Delay?: number; // int64
        /**
         * Action to take if an rolled back task fails to run, or stops running during the rollback.
         */
        FailureAction?: "continue" | "pause";
        /**
         * Amount of time to monitor each rolled back task for failures, in nanoseconds.
         */
        Monitor?: number; // int64
        /**
         * The fraction of tasks that may fail during a rollback before the failure action is invoked, specified as a floating point number between 0 and 1.
         */
        MaxFailureRatio?: number;
        /**
         * The order of operations when rolling back a task. Either the old task is shut down before the new task is started, or the new task is started before the old task is shut down.
         */
        Order?: "stop-first" | "start-first";
    };
    /**
     * Array of network names or IDs to attach the service to.
     */
    Networks?: {
        Target?: string;
        Aliases?: string[];
    }[];
    EndpointSpec?: EndpointSpec;
}
/**
 * example:
 * [object Object]
 */
export interface ServiceUpdateResponse {
    /**
     * Optional warning messages
     */
    Warnings?: string[];
}
/**
 * ClusterInfo represents information about the swarm as is returned by the
 * "/info" endpoint. Join-tokens are not included.
 * 
 */
export interface Swarm {
    /**
     * The ID of the swarm.
     * example:
     * abajmipo7b4xz5ip2nrla6b11
     */
    ID?: string;
    Version?: ObjectVersion;
    /**
     * Date and time at which the swarm was initialised in
     * [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
     * 
     * example:
     * 2016-08-18T10:44:24.496525531Z
     */
    CreatedAt?: string; // dateTime
    /**
     * Date and time at which the swarm was last updated in
     * [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
     * 
     * example:
     * 2017-08-09T07:09:37.632105588Z
     */
    UpdatedAt?: string; // dateTime
    Spec?: SwarmSpec;
    TLSInfo?: TLSInfo;
    /**
     * Whether there is currently a root CA rotation in progress for the swarm
     * example:
     * false
     */
    RootRotationInProgress?: boolean;
    JoinTokens?: JoinTokens;
}
/**
 * Represents generic information about swarm.
 * 
 */
export interface SwarmInfo {
    /**
     * Unique identifier of for this node in the swarm.
     * example:
     * k67qz4598weg5unwwffg6z1m1
     */
    NodeID?: string;
    /**
     * IP address at which this node can be reached by other nodes in the
     * swarm.
     * 
     * example:
     * 10.0.0.46
     */
    NodeAddr?: string;
    LocalNodeState?: LocalNodeState;
    /**
     * example:
     * true
     */
    ControlAvailable?: boolean;
    Error?: string;
    /**
     * List of ID's and addresses of other managers in the swarm.
     * 
     * example:
     * [object Object],[object Object],[object Object]
     */
    RemoteManagers?: PeerNode[];
    /**
     * Total number of nodes in the swarm.
     * example:
     * 4
     */
    Nodes?: number;
    /**
     * Total number of managers in the swarm.
     * example:
     * 3
     */
    Managers?: number;
    Cluster?: ClusterInfo;
}
/**
 * User modifiable swarm configuration.
 */
export interface SwarmSpec {
    /**
     * Name of the swarm.
     * example:
     * default
     */
    Name?: string;
    /**
     * User-defined key/value metadata.
     * example:
     * [object Object]
     */
    Labels?: {
        [name: string]: string;
    };
    /**
     * Orchestration configuration.
     */
    Orchestration?: {
        /**
         * The number of historic tasks to keep per instance or node. If negative, never remove completed or failed tasks.
         * example:
         * 10
         */
        TaskHistoryRetentionLimit?: number; // int64
    };
    /**
     * Raft configuration.
     */
    Raft?: {
        /**
         * The number of log entries between snapshots.
         * example:
         * 10000
         */
        SnapshotInterval?: number; // uint64
        /**
         * The number of snapshots to keep beyond the current snapshot.
         */
        KeepOldSnapshots?: number; // uint64
        /**
         * The number of log entries to keep around to sync up slow followers after a snapshot is created.
         * example:
         * 500
         */
        LogEntriesForSlowFollowers?: number; // uint64
        /**
         * The number of ticks that a follower will wait for a message from the leader before becoming a candidate and starting an election. `ElectionTick` must be greater than `HeartbeatTick`.
         * 
         * A tick currently defaults to one second, so these translate directly to seconds currently, but this is NOT guaranteed.
         * 
         * example:
         * 3
         */
        ElectionTick?: number;
        /**
         * The number of ticks between heartbeats. Every HeartbeatTick ticks, the leader will send a heartbeat to the followers.
         * 
         * A tick currently defaults to one second, so these translate directly to seconds currently, but this is NOT guaranteed.
         * 
         * example:
         * 1
         */
        HeartbeatTick?: number;
    };
    /**
     * Dispatcher configuration.
     */
    Dispatcher?: {
        /**
         * The delay for an agent to send a heartbeat to the dispatcher.
         * example:
         * 5000000000
         */
        HeartbeatPeriod?: number; // int64
    };
    /**
     * CA configuration.
     */
    CAConfig?: {
        /**
         * The duration node certificates are issued for.
         * example:
         * 7776000000000000
         */
        NodeCertExpiry?: number; // int64
        /**
         * Configuration for forwarding signing requests to an external certificate authority.
         */
        ExternalCAs?: {
            /**
             * Protocol for communication with the external CA (currently only `cfssl` is supported).
             */
            Protocol?: "cfssl";
            /**
             * URL where certificate signing requests should be sent.
             */
            URL?: string;
            /**
             * An object with key/value pairs that are interpreted as protocol-specific options for the external CA driver.
             */
            Options?: {
                [name: string]: string;
            };
            /**
             * The root CA certificate (in PEM format) this external CA uses to issue TLS certificates (assumed to be to the current swarm root CA certificate if not provided).
             */
            CACert?: string;
        }[];
        /**
         * The desired signing CA certificate for all swarm node TLS leaf certificates, in PEM format.
         */
        SigningCACert?: string;
        /**
         * The desired signing CA key for all swarm node TLS leaf certificates, in PEM format.
         */
        SigningCAKey?: string;
        /**
         * An integer whose purpose is to force swarm to generate a new signing CA certificate and key, if none have been specified in `SigningCACert` and `SigningCAKey`
         */
        ForceRotate?: number; // uint64
    };
    /**
     * Parameters related to encryption-at-rest.
     */
    EncryptionConfig?: {
        /**
         * If set, generate a key and use it to lock data stored on the managers.
         * example:
         * false
         */
        AutoLockManagers?: boolean;
    };
    /**
     * Defaults for creating tasks in this cluster.
     */
    TaskDefaults?: {
        /**
         * The log driver to use for tasks created in the orchestrator if
         * unspecified by a service.
         * 
         * Updating this value only affects new tasks. Existing tasks continue
         * to use their previously configured log driver until recreated.
         * 
         */
        LogDriver?: {
            /**
             * The log driver to use as a default for new tasks.
             * 
             * example:
             * json-file
             */
            Name?: string;
            /**
             * Driver-specific options for the selectd log driver, specified
             * as key/value pairs.
             * 
             * example:
             * [object Object]
             */
            Options?: {
                [name: string]: string;
            };
        };
    };
}
export interface SystemInfo {
    /**
     * Unique identifier of the daemon.
     * 
     * <p><br /></p>
     * 
     * > **Note**: The format of the ID itself is not part of the API, and
     * > should not be considered stable.
     * 
     * example:
     * 7TRN:IPZB:QYBB:VPBQ:UMPP:KARE:6ZNR:XE6T:7EWV:PKF4:ZOJD:TPYS
     */
    ID?: string;
    /**
     * Total number of containers on the host.
     * example:
     * 14
     */
    Containers?: number;
    /**
     * Number of containers with status `"running"`.
     * 
     * example:
     * 3
     */
    ContainersRunning?: number;
    /**
     * Number of containers with status `"paused"`.
     * 
     * example:
     * 1
     */
    ContainersPaused?: number;
    /**
     * Number of containers with status `"stopped"`.
     * 
     * example:
     * 10
     */
    ContainersStopped?: number;
    /**
     * Total number of images on the host.
     * 
     * Both _tagged_ and _untagged_ (dangling) images are counted.
     * 
     * example:
     * 508
     */
    Images?: number;
    /**
     * Name of the storage driver in use.
     * example:
     * overlay2
     */
    Driver?: string;
    /**
     * Information specific to the storage driver, provided as
     * "label" / "value" pairs.
     * 
     * This information is provided by the storage driver, and formatted
     * in a way consistent with the output of `docker info` on the command
     * line.
     * 
     * <p><br /></p>
     * 
     * > **Note**: The information returned in this field, including the
     * > formatting of values and labels, should not be considered stable,
     * > and may change without notice.
     * 
     * example:
     * Backing Filesystem,extfs,Supports d_type,true,Native Overlay Diff,true
     */
    DriverStatus?: string[][];
    /**
     * Root directory of persistent Docker state.
     * 
     * Defaults to `/var/lib/docker` on Linux, and `C:\ProgramData\docker`
     * on Windows.
     * 
     * example:
     * /var/lib/docker
     */
    DockerRootDir?: string;
    /**
     * Status information about this node (standalone Swarm API).
     * 
     * <p><br /></p>
     * 
     * > **Note**: The information returned in this field is only propagated
     * > by the Swarm standalone API, and is empty (`null`) when using
     * > built-in swarm mode.
     * 
     * example:
     * Role,primary,State,Healthy,Strategy,spread,Filters,health, port, containerslots, dependency, affinity, constraint, whitelist,Nodes,2, swarm-agent-00,192.168.99.102:2376,  └ ID,5CT6:FBGO:RVGO:CZL4:PB2K:WCYN:2JSV:KSHH:GGFW:QOPG:6J5Q:IOZ2|192.168.99.102:2376,  └ Status,Healthy,  └ Containers,1 (1 Running, 0 Paused, 0 Stopped),  └ Reserved CPUs,0 / 1,  └ Reserved Memory,0 B / 1.021 GiB,  └ Labels,kernelversion=4.4.74-boot2docker, operatingsystem=Boot2Docker 17.06.0-ce (TCL 7.2); HEAD : 0672754 - Thu Jun 29 00:06:31 UTC 2017, ostype=linux, provider=virtualbox, storagedriver=aufs,  └ UpdatedAt,2017-08-09T10:03:46Z,  └ ServerVersion,17.06.0-ce, swarm-manager,192.168.99.101:2376,  └ ID,TAMD:7LL3:SEF7:LW2W:4Q2X:WVFH:RTXX:JSYS:XY2P:JEHL:ZMJK:JGIW|192.168.99.101:2376,  └ Status,Healthy,  └ Containers,2 (2 Running, 0 Paused, 0 Stopped),  └ Reserved CPUs,0 / 1,  └ Reserved Memory,0 B / 1.021 GiB,  └ Labels,kernelversion=4.4.74-boot2docker, operatingsystem=Boot2Docker 17.06.0-ce (TCL 7.2); HEAD : 0672754 - Thu Jun 29 00:06:31 UTC 2017, ostype=linux, provider=virtualbox, storagedriver=aufs,  └ UpdatedAt,2017-08-09T10:04:11Z,  └ ServerVersion,17.06.0-ce
     */
    SystemStatus?: string[][];
    Plugins?: PluginsInfo;
    /**
     * Indicates if the host has memory limit support enabled.
     * example:
     * true
     */
    MemoryLimit?: boolean;
    /**
     * Indicates if the host has memory swap limit support enabled.
     * example:
     * true
     */
    SwapLimit?: boolean;
    /**
     * Indicates if the host has kernel memory limit support enabled.
     * example:
     * true
     */
    KernelMemory?: boolean;
    /**
     * Indicates if CPU CFS(Completely Fair Scheduler) period is supported by the host.
     * example:
     * true
     */
    CpuCfsPeriod?: boolean;
    /**
     * Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by the host.
     * example:
     * true
     */
    CpuCfsQuota?: boolean;
    /**
     * Indicates if CPU Shares limiting is supported by the host.
     * example:
     * true
     */
    CPUShares?: boolean;
    /**
     * Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.
     * 
     * See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt)
     * 
     * example:
     * true
     */
    CPUSet?: boolean;
    /**
     * Indicates if OOM killer disable is supported on the host.
     */
    OomKillDisable?: boolean;
    /**
     * Indicates IPv4 forwarding is enabled.
     * example:
     * true
     */
    IPv4Forwarding?: boolean;
    /**
     * Indicates if `bridge-nf-call-iptables` is available on the host.
     * example:
     * true
     */
    BridgeNfIptables?: boolean;
    /**
     * Indicates if `bridge-nf-call-ip6tables` is available on the host.
     * example:
     * true
     */
    BridgeNfIp6tables?: boolean;
    /**
     * Indicates if the daemon is running in debug-mode / with debug-level logging enabled.
     * example:
     * true
     */
    Debug?: boolean;
    /**
     * The total number of file Descriptors in use by the daemon process.
     * 
     * This information is only returned if debug-mode is enabled.
     * 
     * example:
     * 64
     */
    NFd?: number;
    /**
     * The  number of goroutines that currently exist.
     * 
     * This information is only returned if debug-mode is enabled.
     * 
     * example:
     * 174
     */
    NGoroutines?: number;
    /**
     * Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt)
     * format with nano-seconds.
     * 
     * example:
     * 2017-08-08T20:28:29.06202363Z
     */
    SystemTime?: string;
    /**
     * The logging driver to use as a default for new containers.
     * 
     */
    LoggingDriver?: string;
    /**
     * The driver to use for managing cgroups.
     * 
     * example:
     * cgroupfs
     */
    CgroupDriver?: "cgroupfs" | "systemd";
    /**
     * Number of event listeners subscribed.
     * example:
     * 30
     */
    NEventsListener?: number;
    /**
     * Kernel version of the host.
     * 
     * On Linux, this information obtained from `uname`. On Windows this
     * information is queried from the <kbd>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\</kbd>
     * registry value, for example _"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)"_.
     * 
     * example:
     * 4.9.38-moby
     */
    KernelVersion?: string;
    /**
     * Name of the host's operating system, for example: "Ubuntu 16.04.2 LTS"
     * or "Windows Server 2016 Datacenter"
     * 
     * example:
     * Alpine Linux v3.5
     */
    OperatingSystem?: string;
    /**
     * Generic type of the operating system of the host, as returned by the
     * Go runtime (`GOOS`).
     * 
     * Currently returned values are "linux" and "windows". A full list of
     * possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).
     * 
     * example:
     * linux
     */
    OSType?: string;
    /**
     * Hardware architecture of the host, as returned by the Go runtime
     * (`GOARCH`).
     * 
     * A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).
     * 
     * example:
     * x86_64
     */
    Architecture?: string;
    /**
     * The number of logical CPUs usable by the daemon.
     * 
     * The number of available CPUs is checked by querying the operating
     * system when the daemon starts. Changes to operating system CPU
     * allocation after the daemon is started are not reflected.
     * 
     * example:
     * 4
     */
    NCPU?: number;
    /**
     * Total amount of physical memory available on the host, in kilobytes (kB).
     * 
     * example:
     * 2095882240
     */
    MemTotal?: number; // int64
    /**
     * Address / URL of the index server that is used for image search,
     * and as a default for user authentication for Docker Hub and Docker Cloud.
     * 
     * example:
     * https://index.docker.io/v1/
     */
    IndexServerAddress?: string;
    RegistryConfig?: RegistryServiceConfig;
    GenericResources?: GenericResources;
    /**
     * HTTP-proxy configured for the daemon. This value is obtained from the
     * [`HTTP_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.
     * 
     * Containers do not automatically inherit this configuration.
     * 
     * example:
     * http://user:pass@proxy.corp.example.com:8080
     */
    HttpProxy?: string;
    /**
     * HTTPS-proxy configured for the daemon. This value is obtained from the
     * [`HTTPS_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.
     * 
     * Containers do not automatically inherit this configuration.
     * 
     * example:
     * https://user:pass@proxy.corp.example.com:4443
     */
    HttpsProxy?: string;
    /**
     * Comma-separated list of domain extensions for which no proxy should be
     * used. This value is obtained from the [`NO_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html)
     * environment variable.
     * 
     * Containers do not automatically inherit this configuration.
     * 
     * example:
     * *.local, 169.254/16
     */
    NoProxy?: string;
    /**
     * Hostname of the host.
     * example:
     * node5.corp.example.com
     */
    Name?: string;
    /**
     * User-defined labels (key/value metadata) as set on the daemon.
     * 
     * <p><br /></p>
     * 
     * > **Note**: When part of a Swarm, nodes can both have _daemon_ labels,
     * > set through the daemon configuration, and _node_ labels, set from a
     * > manager node in the Swarm. Node labels are not included in this
     * > field. Node labels can be retrieved using the `/nodes/(id)` endpoint
     * > on a manager node in the Swarm.
     * 
     * example:
     * storage=ssd,production
     */
    Labels?: string[];
    /**
     * Indicates if experimental features are enabled on the daemon.
     * 
     * example:
     * true
     */
    ExperimentalBuild?: boolean;
    /**
     * Version string of the daemon.
     * 
     * > **Note**: the [standalone Swarm API](https://docs.docker.com/swarm/swarm-api/)
     * > returns the Swarm version instead of the daemon  version, for example
     * > `swarm/1.2.8`.
     * 
     * example:
     * 17.06.0-ce
     */
    ServerVersion?: string;
    /**
     * URL of the distributed storage backend.
     * 
     * 
     * The storage backend is used for multihost networking (to store
     * network and endpoint information) and by the node discovery mechanism.
     * 
     * <p><br /></p>
     * 
     * > **Note**: This field is only propagated when using standalone Swarm
     * > mode, and overlay networking using an external k/v store. Overlay
     * > networks with Swarm mode enabled use the built-in raft store, and
     * > this field will be empty.
     * 
     * example:
     * consul://consul.corp.example.com:8600/some/path
     */
    ClusterStore?: string;
    /**
     * The network endpoint that the Engine advertises for the purpose of
     * node discovery. ClusterAdvertise is a `host:port` combination on which
     * the daemon is reachable by other hosts.
     * 
     * <p><br /></p>
     * 
     * > **Note**: This field is only propagated when using standalone Swarm
     * > mode, and overlay networking using an external k/v store. Overlay
     * > networks with Swarm mode enabled use the built-in raft store, and
     * > this field will be empty.
     * 
     * example:
     * node5.corp.example.com:8000
     */
    ClusterAdvertise?: string;
    /**
     * List of [OCI compliant](https://github.com/opencontainers/runtime-spec)
     * runtimes configured on the daemon. Keys hold the "name" used to
     * reference the runtime.
     * 
     * The Docker daemon relies on an OCI compliant runtime (invoked via the
     * `containerd` daemon) as its interface to the Linux kernel namespaces,
     * cgroups, and SELinux.
     * 
     * The default runtime is `runc`, and automatically configured. Additional
     * runtimes can be configured by the user and will be listed here.
     * 
     * example:
     * [object Object]
     */
    Runtimes?: {
        [name: string]: Runtime;
    };
    /**
     * Name of the default OCI runtime that is used when starting containers.
     * 
     * The default can be overridden per-container at create time.
     * 
     * example:
     * runc
     */
    DefaultRuntime?: string;
    Swarm?: SwarmInfo;
    /**
     * Indicates if live restore is enabled.
     * 
     * If enabled, containers are kept running when the daemon is shutdown
     * or upon daemon start if running containers are detected.
     * 
     * example:
     * false
     */
    LiveRestoreEnabled?: boolean;
    /**
     * Represents the isolation technology to use as a default for containers.
     * The supported values are platform-specific.
     * 
     * If no isolation value is specified on daemon start, on Windows client,
     * the default is `hyperv`, and on Windows server, the default is `process`.
     * 
     * This option is currently not used on other platforms.
     * 
     */
    Isolation?: "default" | "hyperv" | "process";
    /**
     * Name and, optional, path of the the `docker-init` binary.
     * 
     * If the path is omitted, the daemon searches the host's `$PATH` for the
     * binary and uses the first result.
     * 
     * example:
     * docker-init
     */
    InitBinary?: string;
    ContainerdCommit?: Commit;
    RuncCommit?: Commit;
    InitCommit?: Commit;
    /**
     * List of security features that are enabled on the daemon, such as
     * apparmor, seccomp, SELinux, and user-namespaces (userns).
     * 
     * Additional configuration options for each security feature may
     * be present, and are included as a comma-separated list of key/value
     * pairs.
     * 
     * example:
     * name=apparmor,name=seccomp,profile=default,name=selinux,name=userns
     */
    SecurityOptions?: string[];
}
/**
 * Information about the issuer of leaf TLS certificates and the trusted root CA certificate
 * example:
 * [object Object]
 */
export interface TLSInfo {
    /**
     * The root CA certificate(s) that are used to validate leaf TLS certificates
     */
    TrustRoot?: string;
    /**
     * The base64-url-safe-encoded raw subject bytes of the issuer
     */
    CertIssuerSubject?: string;
    /**
     * The base64-url-safe-encoded raw public key bytes of the issuer
     */
    CertIssuerPublicKey?: string;
}
/**
 * example:
 * [object Object]
 */
export interface Task {
    /**
     * The ID of the task.
     */
    ID?: string;
    Version?: ObjectVersion;
    CreatedAt?: string; // dateTime
    UpdatedAt?: string; // dateTime
    /**
     * Name of the task.
     */
    Name?: string;
    /**
     * User-defined key/value metadata.
     */
    Labels?: {
        [name: string]: string;
    };
    Spec?: TaskSpec;
    /**
     * The ID of the service this task is part of.
     */
    ServiceID?: string;
    Slot?: number;
    /**
     * The ID of the node that this task is on.
     */
    NodeID?: string;
    AssignedGenericResources?: GenericResources;
    Status?: {
        Timestamp?: string; // dateTime
        State?: TaskState;
        Message?: string;
        Err?: string;
        ContainerStatus?: {
            ContainerID?: string;
            PID?: number;
            ExitCode?: number;
        };
    };
    DesiredState?: TaskState;
}
/**
 * User modifiable task configuration.
 */
export interface TaskSpec {
    /**
     * Invalid when specified with `ContainerSpec`. *(Experimental release only.)*
     */
    PluginSpec?: {
        /**
         * The name or 'alias' to use for the plugin.
         */
        Name?: string;
        /**
         * The plugin image reference to use.
         */
        Remote?: string;
        /**
         * Disable the plugin once scheduled.
         */
        Disabled?: boolean;
        PluginPrivilege?: {
            Name?: string;
            Description?: string;
            Value?: string[];
        }[];
    };
    /**
     * Invalid when specified with `PluginSpec`.
     */
    ContainerSpec: {
        /**
         * The image name to use for the container
         */
        Image: string;
        /**
         * User-defined key/value data.
         */
        Labels?: {
            [name: string]: string;
        };
        /**
         * The command to be run in the image.
         */
        Command?: string[];
        /**
         * Arguments to the command.
         */
        Args?: string[];
        /**
         * The hostname to use for the container, as a valid RFC 1123 hostname.
         */
        Hostname?: string;
        /**
         * A list of environment variables in the form `VAR=value`.
         */
        Env?: string[];
        /**
         * The working directory for commands to run in.
         */
        Dir?: string;
        /**
         * The user inside the container.
         */
        User?: string;
        /**
         * A list of additional groups that the container process will run as.
         */
        Groups?: string[];
        /**
         * Security options for the container
         */
        Privileges?: {
            /**
             * CredentialSpec for managed service account (Windows only)
             */
            CredentialSpec?: {
                /**
                 * Load credential spec from this file. The file is read by the daemon, and must be present in the
                 * `CredentialSpecs` subdirectory in the docker data directory, which defaults to
                 * `C:\ProgramData\Docker\` on Windows.
                 * 
                 * For example, specifying `spec.json` loads `C:\ProgramData\Docker\CredentialSpecs\spec.json`.
                 * 
                 * <p><br /></p>
                 * 
                 * > **Note**: `CredentialSpec.File` and `CredentialSpec.Registry` are mutually exclusive.
                 * 
                 */
                File?: string;
                /**
                 * Load credential spec from this value in the Windows registry. The specified registry value must be
                 * located in:
                 * 
                 * `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Virtualization\Containers\CredentialSpecs`
                 * 
                 * <p><br /></p>
                 * 
                 * 
                 * > **Note**: `CredentialSpec.File` and `CredentialSpec.Registry` are mutually exclusive.
                 * 
                 */
                Registry?: string;
            };
            /**
             * SELinux labels of the container
             */
            SELinuxContext?: {
                /**
                 * Disable SELinux
                 */
                Disable?: boolean;
                /**
                 * SELinux user label
                 */
                User?: string;
                /**
                 * SELinux role label
                 */
                Role?: string;
                /**
                 * SELinux type label
                 */
                Type?: string;
                /**
                 * SELinux level label
                 */
                Level?: string;
            };
        };
        /**
         * Whether a pseudo-TTY should be allocated.
         */
        TTY?: boolean;
        /**
         * Open `stdin`
         */
        OpenStdin?: boolean;
        /**
         * Mount the container's root filesystem as read only.
         */
        ReadOnly?: boolean;
        /**
         * Specification for mounts to be added to containers created as part of the service.
         */
        Mounts?: Mount[];
        /**
         * Signal to stop the container.
         */
        StopSignal?: string;
        /**
         * Amount of time to wait for the container to terminate before forcefully killing it.
         */
        StopGracePeriod?: number; // int64
        HealthCheck?: HealthConfig;
        /**
         * A list of hostname/IP mappings to add to the container's `hosts`
         * file. The format of extra hosts is specified in the
         * [hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html)
         * man page:
         * 
         *     IP_address canonical_hostname [aliases...]
         * 
         */
        Hosts?: string[];
        /**
         * Specification for DNS related configurations in resolver configuration file (`resolv.conf`).
         */
        DNSConfig?: {
            /**
             * The IP addresses of the name servers.
             */
            Nameservers?: string[];
            /**
             * A search list for host-name lookup.
             */
            Search?: string[];
            /**
             * A list of internal resolver variables to be modified (e.g., `debug`, `ndots:3`, etc.).
             */
            Options?: string[];
        };
        /**
         * Secrets contains references to zero or more secrets that will be exposed to the service.
         */
        Secrets?: {
            /**
             * File represents a specific target that is backed by a file.
             */
            File?: {
                /**
                 * Name represents the final filename in the filesystem.
                 */
                Name?: string;
                /**
                 * UID represents the file UID.
                 */
                UID?: string;
                /**
                 * GID represents the file GID.
                 */
                GID?: string;
                /**
                 * Mode represents the FileMode of the file.
                 */
                Mode?: number; // uint32
            };
            /**
             * SecretID represents the ID of the specific secret that we're referencing.
             */
            SecretID?: string;
            /**
             * SecretName is the name of the secret that this references, but this is just provided for
             * lookup/display purposes. The secret in the reference will be identified by its ID.
             * 
             */
            SecretName?: string;
        }[];
        /**
         * Configs contains references to zero or more configs that will be exposed to the service.
         */
        Configs?: {
            /**
             * File represents a specific target that is backed by a file.
             */
            File?: {
                /**
                 * Name represents the final filename in the filesystem.
                 */
                Name?: string;
                /**
                 * UID represents the file UID.
                 */
                UID?: string;
                /**
                 * GID represents the file GID.
                 */
                GID?: string;
                /**
                 * Mode represents the FileMode of the file.
                 */
                Mode?: number; // uint32
            };
            /**
             * ConfigID represents the ID of the specific config that we're referencing.
             */
            ConfigID?: string;
            /**
             * ConfigName is the name of the config that this references, but this is just provided for
             * lookup/display purposes. The config in the reference will be identified by its ID.
             * 
             */
            ConfigName: string;
        }[];
        /**
         * Isolation technology of the containers running the service. (Windows only)
         */
        Isolation?: "default" | "process" | "hyperv";
    };
    /**
     * Resource requirements which apply to each individual container created as part of the service.
     */
    Resources?: {
        /**
         * Define resources limits.
         */
        Limits?: ResourceObject;
        /**
         * Define resources reservation.
         */
        Reservation?: ResourceObject;
    };
    /**
     * Specification for the restart policy which applies to containers created as part of this service.
     */
    RestartPolicy?: {
        /**
         * Condition for restart.
         */
        Condition?: "none" | "on-failure" | "any";
        /**
         * Delay between restart attempts.
         */
        Delay?: number; // int64
        /**
         * Maximum attempts to restart a given container before giving up (default value is 0, which is ignored).
         */
        MaxAttempts?: number; // int64
        /**
         * Windows is the time window used to evaluate the restart policy (default value is 0, which is unbounded).
         */
        Window?: number; // int64
    };
    Placement?: {
        /**
         * An array of constraints.
         * example:
         * node.hostname!=node3.corp.example.com,node.role!=manager,node.labels.type==production
         */
        Constraints?: string[];
        /**
         * Preferences provide a way to make the scheduler aware of factors such as topology. They are provided in order from highest to lowest precedence.
         * example:
         * [object Object],[object Object]
         */
        Preferences?: {
            Spread?: {
                /**
                 * label descriptor, such as engine.labels.az
                 */
                SpreadDescriptor?: string;
            };
        }[];
        /**
         * Platforms stores all the platforms that the service's image can
         * run on. This field is used in the platform filter for scheduling.
         * If empty, then the platform filter is off, meaning there are no
         * scheduling restrictions.
         * 
         */
        Platforms?: Platform[];
    };
    /**
     * A counter that triggers an update even if no relevant parameters have been changed.
     */
    ForceUpdate?: number;
    /**
     * Runtime is the type of runtime specified for the task executor.
     */
    Runtime?: string;
    Networks?: {
        Target: string;
        Aliases?: string[];
    }[];
    /**
     * Specifies the log driver to use for tasks created from this spec. If not present, the default one for the swarm will be used, finally falling back to the engine default if not specified.
     */
    LogDriver?: {
        Name?: string;
        Options?: {
            [name: string]: string;
        };
    };
}
export type TaskState = "new" | "allocated" | "pending" | "assigned" | "accepted" | "preparing" | "ready" | "starting" | "running" | "complete" | "shutdown" | "failed" | "rejected" | "remove" | "orphaned";
export interface ThrottleDevice {
    /**
     * Device path
     */
    Path?: string;
    /**
     * Rate
     */
    Rate?: number; // int64
}
/**
 * example:
 * [object Object]
 */
export interface Volume {
    /**
     * Name of the volume.
     */
    Name: string;
    /**
     * Name of the volume driver used by the volume.
     */
    Driver: string;
    /**
     * Mount path of the volume on the host.
     */
    Mountpoint: string;
    /**
     * Date/Time the volume was created.
     */
    CreatedAt?: string; // dateTime
    /**
     * Low-level details about the volume, provided by the volume driver.
     * Details are returned as a map with key/value pairs:
     * `{"key":"value","key2":"value2"}`.
     * 
     * The `Status` field is optional, and is omitted if the volume driver
     * does not support this feature.
     * 
     */
    Status?: {
        [name: string]: {
        };
    };
    /**
     * User-defined key/value metadata.
     */
    Labels: {
        [name: string]: string;
    };
    /**
     * The level at which the volume exists. Either `global` for cluster-wide, or `local` for machine level.
     */
    Scope: "local" | "global";
    /**
     * The driver specific options used when creating the volume.
     */
    Options: {
        [name: string]: string;
    };
    /**
     * Usage details about the volume. This information is used by the
     * `GET /system/df` endpoint, and omitted in other endpoints.
     * 
     */
    UsageData?: {
        /**
         * Amount of disk space used by the volume (in bytes). This information
         * is only available for volumes created with the `"local"` volume
         * driver. For volumes created with other volume drivers, this field
         * is set to `-1` ("not available")
         * 
         */
        Size: number;
        /**
         * The number of containers referencing this volume. This field
         * is set to `-1` if the reference-count is not available.
         * 
         */
        RefCount: number;
    };
}
